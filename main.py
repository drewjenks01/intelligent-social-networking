
import argparse
from facial_detection.facial_detection import FacialDetection
from database.db import Database
from llm_extraction.extract_from_llm import LLMAgent
import cv2
from PIL import Image, ImageDraw
import numpy as np
# import os
# os.environ["IMAGEIO_FFMPEG_EXE"] = "/usr/bin/ffmpeg"
import moviepy.editor as mp

def arg_parser():
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--phase', type=int, help='phase 1 to add to database, phase 2 to query database')
    return parser.parse_args()

background = np.ones((400, 600, 3), np.uint8) * 255  # White background
def draw_faces(frame, faces, found=False, text = 'Face Detected'):
  # Draw bounding box around each detected face
    (x, y, w, h)  = (int(x) for x in faces)

    # green if found, red if not found
    color = (0, 255, 0) if found else (0, 0, 255)
    cv2.rectangle(frame, (int(x), int(y)), (int(w), int(h)), color, 2)  # Green rectangle
    
    font = cv2.FONT_HERSHEY_SIMPLEX  # Choose a font

    # split text by \n, put text on new lines and add white background behind text. make sure the text doesnt overlap vertically, put it to the right of the rectangle above
    text = text.split('\n')
    for i, t in enumerate(text):
        cv2.putText(frame, t, (int(w), int(y) + 20 + 20*i), font, 0.5, (0, 0, 0), 2, cv2.LINE_AA)
        cv2.putText(frame, t, (int(w), int(y) + 20 + 20*i), font, 0.5, (255, 255, 255), 1, cv2.LINE_AA)

        # change it ot be to the right of the rectangle
        # cv2.putText(frame, t, (int(w), int(y) + 20 + 20*i), font, 0.5, (0, 0, 0), 2, cv2.LINE_AA)
        # cv2.putText(frame, t, (int(w), int(y) + 20 + 20*i), font, 0.5, (255, 255, 255), 1, cv2.LINE_AA)

    return frame


def main(args):
    llm_agent = LLMAgent()
    response = llm_agent.generate('''Given the following conversation transcription extract the key information for each user. Respond in an easily readble format that could be displayed on a live video stream. As much detail in as few words for each section. I do not want a title for the summary, only return sections in the form of 
    "Section name: Information".
                                  \n Hi, my name is Amogh and Im from Mequon, Wisconsin. Im currently, I was majoring in computer science but graduated last semester. I really like basketball and I love to cook and Ill be working full time in Austin.''')

    print(response)
    
    facial_detection = FacialDetection()
    database = Database("hnsw", "cosine", inference=True)

    # cv2.namedWindow("preview")
    # cap = cv2.VideoCapture(1)        # Open the default camera

    # open .mov file
    if args.phase == 1:
        cap = cv2.VideoCapture('videos/6s079_vid_1.mov')
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        out = cv2.VideoWriter('videos/processed_1.mp4', fourcc, 30.0, (w,h))     
        embedding_buffer = []
    else:
        embedding_buffer = []
        embedding = np.array((0.010395756922662258, -0.0543564073741436, 0.033675603568553925, -0.009337393566966057, 0.0233573280274868, -0.04415036737918854, -0.04488403722643852, 0.04598328843712807, 0.011728839948773384, -0.054169464856386185, 0.027248995378613472, -0.039972588419914246, -0.0181870199739933, 0.03143083304166794, -0.03824364393949509, 0.01587427407503128, 0.07882411032915115, 0.060429852455854416, 0.03893398866057396, 0.07736323028802872, -0.0624377466738224, -0.007100634276866913, 0.04971227049827576, 0.005874930880963802, -0.0068669007159769535, 0.07591260224580765, 0.02735975570976734, 0.06562034785747528, 0.07581073045730591, -0.053442515432834625, 0.030279817059636116, 0.024093447253108025, 8.154570969054475e-05, 0.027592381462454796, 0.026806248351931572, 0.021481504663825035, -0.018879368901252747, -0.033160191029310226, -0.012329865247011185, -0.017968274652957916, 0.00546582555398345, 0.058494582772254944, -0.01886315457522869, 0.010305909439921379, 0.019803982228040695, -0.020120421424508095, 0.016428953036665916, 0.04236485809087753, -0.03161395713686943, -0.004435033071786165, 0.0028501448687165976, -0.03544437885284424, -0.01044092234224081, -0.002787485485896468, 0.09333347529172897, 0.09449101239442825, -0.051197268068790436, 0.0273590125143528, -0.043277185410261154, -0.10438372194766998, -0.038156330585479736, 0.029040439054369926, 0.04845426604151726, -0.07776562124490738, 0.023702634498476982, 0.03446735069155693, -0.04667329788208008, -0.010960264131426811, 0.009646746329963207, -0.03973143920302391, -0.030833043158054352, -0.03343924134969711, -0.07089733332395554, -0.008450261317193508, 0.055783092975616455, 0.02544042281806469, -0.03676600009202957, 0.011577626690268517, -0.010406768880784512, -0.006344447378069162, -0.001435509417206049, 0.05079014226794243, -0.04617442563176155, -0.008125203661620617, -0.026724861934781075, -0.07890002429485321, 0.05187253654003143, -0.04739416390657425, -0.029550859704613686, -0.004264384042471647, 0.028923003003001213, 0.08716210722923279, -0.03855655714869499, -0.0575580820441246, 0.07945241034030914, 0.05481854826211929, -0.04929911345243454, 0.009411178529262543, 0.019294092431664467, -0.02916502207517624, -0.01645089127123356, -0.03413376584649086, -0.017806900665163994, 0.013942142017185688, 0.0011926466831937432, 0.027526475489139557, -0.0026379048358649015, 0.024510106071829796, -0.00495282793417573, -0.03226090967655182, -0.058128923177719116, 0.01655758172273636, 0.05633404478430748, 0.012796941213309765, 0.00046263504191301763, -0.02646714448928833, 0.00286695989780128, 0.02565227821469307, -0.027145814150571823, 0.05641372129321098, -0.025798531249165535, -0.01887943036854267, 0.01886412501335144, 0.015033407136797905, 0.027949009090662003, -0.06963641196489334, 0.04442764073610306, -0.015570946969091892, -0.018861886113882065, 0.022075045853853226, 0.08032836019992828, 0.03655630350112915, -0.017523936927318573, -0.026750866323709488, -0.03335948660969734, -0.032654911279678345, -0.08774176985025406, -0.10701073706150055, 0.003360565984621644, -0.031195057556033134, -0.01695876382291317, -0.07377707213163376, -0.00510548846796155, 0.036216288805007935, 0.04458964988589287, -0.08262767642736435, 0.0690620169043541, -0.011857695877552032, 0.001955091953277588, -0.026287147775292397, -0.04126353561878204, 0.026661135256290436, -0.009604300372302532, 0.06658793240785599, -0.007648560684174299, -0.018450098112225533, -0.012618794105947018, 0.047042202204465866, -0.005669609643518925, -0.02811191789805889, 0.04881485551595688, 0.026386693120002747, -0.07377824187278748, -0.005125169176608324, 0.05693824216723442, -0.04322339594364166, -0.057092297822237015, -0.02129412814974785, 0.03742652386426926, -0.037521664053201675, -0.029754992574453354, 0.06602474302053452, 0.028808027505874634, 0.013951443135738373, 0.03460713103413582, 0.07152411341667175, -0.03447270765900612, 0.03867340087890625, -0.023279406130313873, -0.007293995004147291, 0.01902666687965393, -0.019970262423157692, 0.05957164242863655, -0.02436048537492752, -0.04474712163209915, 0.03408002480864525, 0.010971590876579285, -0.033135831356048584, 0.0049227080307900906, 0.02530207298696041, 0.034140657633543015, -0.053338807076215744, -0.02350902184844017, 0.09298556298017502, -0.0020711084362119436, -0.07375011593103409, -0.007655870635062456, 0.02029501274228096, -0.053507208824157715, -0.029148776084184647, -0.03490286320447922, -0.014553440734744072, 0.023710519075393677, 0.019106661900877953, 0.023793760687112808, -0.01587722636759281, -0.025532608851790428, 0.013283023610711098, 0.00551528250798583, -0.03621587157249451, 0.030053161084651947, 0.033999696373939514, -0.04501340538263321, -0.02188700996339321, -0.12020258605480194, 0.055084481835365295, -0.01646038517355919, -0.0077636041678488255, -0.07988888025283813, 0.007524961605668068, -0.007071772124618292, -0.045521028339862823, -0.046406570822000504, 0.032067302614450455, -0.05245917662978172, -0.03164985403418541, -0.11837558448314667, 0.04214507341384888, 0.03156224638223648, -0.042399097234010696, -0.039714664220809937, 0.010875183157622814, 0.021058447659015656, -0.030367868021130562, -0.03194284439086914, 0.021085083484649658, -0.05966229736804962, -0.0002933784562628716, -0.04439493268728256, -0.015813367441296577, -0.06383553892374039, 0.024089554324746132, 0.002041602274402976, -0.057201236486434937, 0.03372226655483246, -0.008862978778779507, -0.011612413451075554, 0.01821867935359478, 0.005185886286199093, -0.014727943576872349, 0.03514233976602554, -0.05539662763476372, -0.008670172654092312, -0.03804859519004822, 0.047253500670194626, -0.03291252627968788, -0.0022925438825041056, 0.004188831429928541, -0.014366120100021362, -0.05598369985818863, 0.08817345649003983, 0.036313947290182114, 0.029069144278764725, 0.04362604022026062, 0.0031125263776630163, -0.03232496604323387, -0.006331360433250666, 0.01102379709482193, -0.023051632568240166, 0.05854440852999687, -1.9404989870963618e-05, -0.0012800567783415318, -0.008195526897907257, -0.015443898737430573, 0.00912383571267128, -0.02099642902612686, 0.008126896806061268, 0.018458854407072067, 0.031118100509047508, -0.027868645265698433, 0.015963273122906685, 0.037095073610544205, -0.04599175974726677, -0.02267112024128437, -0.019881468266248703, 0.012165870517492294, 0.012558707036077976, -0.04182714596390724, -0.04172557219862938, 0.09626790136098862, 0.027821777388453484, 0.005610966589301825, -0.016598403453826904, -0.062443699687719345, -0.038145292550325394, -0.031492143869400024, 0.05743975192308426, 0.02023695595562458, 0.023143360391259193, -0.01552054937928915, 0.017033064737915993, 0.08894342929124832, -0.014543088153004646, -0.03139703348278999, 0.04804458096623421, -0.05433660373091698, -0.07156019657850266, -0.02949432097375393, 0.054781146347522736, -0.020391015335917473, 0.018207000568509102, 0.04784530773758888, 0.016622822731733322, -0.03867688402533531, -0.007008817512542009, 0.021156711503863335, -0.02326865866780281, 0.0772988423705101, 0.03794306516647339, 0.03593108430504799, -0.023056184872984886, 0.0007032972644083202, -0.011615386232733727, 0.036618027836084366, -0.04642218351364136, -0.001988187665119767, 0.029684962704777718, 0.06066053733229637, 0.016979044303297997, 0.04312533885240555, -0.03509172797203064, 0.009143413975834846, 0.015514420345425606, 0.03722269460558891, 0.00984999630600214, -0.00820793304592371, 0.005753843113780022, -0.001243639038875699, 0.01383556891232729, -0.03259866312146187, 0.04698935151100159, -0.040818847715854645, -0.05506805703043938, -0.021649494767189026, -0.06837481260299683, -0.05461650341749191, 0.06601811200380325, 0.026116611436009407, -0.017309268936514854, 0.014443417079746723, -0.03415554016828537, -0.08164142817258835, -0.022647904232144356, 0.01070220023393631, -0.06602711230516434, 0.07373782247304916, -0.008987578563392162, -0.06708637624979019, 0.0157416220754385, 0.0035377859603613615, -0.05935462936758995, 0.009577160701155663, 0.06716787815093994, 0.06393790245056152, 0.0328325554728508, -0.031488750129938126, 0.029402922838926315, 0.024958983063697815, -0.012731439433991909, -0.014846092090010643, -0.05524502322077751, -0.0024527423083782196, 0.05266479030251503, -0.032352790236473083, -0.056698624044656754, 0.041683122515678406, 0.07632212340831757, -0.06384968757629395, 0.035562947392463684, 0.0007097027264535427, 0.03594070300459862, -0.0020623733289539814, -0.009485522285103798, 0.034514229744672775, 0.0030107274651527405, 0.07155582308769226, -0.059199851006269455, 0.052761729806661606, 0.040434010326862335, -0.05679459124803543, -0.05319288372993469, 0.006472695153206587, 0.049547940492630005, -0.04394686967134476, -0.04242648556828499, 0.0093517005443573, -0.006770096719264984, 0.014365245588123798, -0.0056096455082297325, -0.016467146575450897, 0.010931825265288353, 0.022351490333676338, 0.04879821464419365, -0.002340424805879593, 0.012113685719668865, -0.014699126593768597, -0.042031094431877136, -0.010519180446863174, 0.03361942619085312, 0.04832164943218231, -0.03515205532312393, 0.014289207756519318, 0.006022951100021601, 0.05408097803592682, -0.0060747223906219006, 0.040333881974220276, -0.007765745744109154, -0.03348410502076149, -0.004129147157073021, 0.02725679613649845, -0.032102297991514206, -0.03955129534006119, -0.013840118423104286, 0.013205884024500847, -0.010211953893303871, -0.046796899288892746, -0.0008638512808829546, -0.05380018800497055, -0.004228743724524975, -0.0511573851108551, -0.026108749210834503, -0.007461342960596085, 0.00914690364152193, 0.021672017872333527, -0.011893457733094692, 0.018781278282403946, 0.04964929446578026, 0.018321728333830833, 0.01663365587592125, -0.0302668958902359, 0.020800314843654633, -0.032980404794216156, 0.08097919076681137, -0.035074543207883835, -0.025258246809244156, -0.03428535535931587, 0.05182638391852379, 0.041933823376894, -0.010109941475093365, -0.037059638649225235, 0.017492473125457764, -0.07363764941692352, 0.005268166307359934, 0.044392816722393036, 0.044914186000823975, -0.03926565498113632, -0.08141852915287018, 0.03997396305203438, 0.023946654051542282, 0.06886246055364609, 0.07285597920417786, 0.05084187164902687, -0.007446931209415197, -0.03941739723086357, 0.0036954558454453945, 0.017443887889385223, 0.004051496274769306, 0.004297537729144096, -0.08996867388486862, 0.006940445862710476, -0.006906413938850164, -0.10869602859020233, -0.02591153420507908, 0.01920621655881405, -0.014561381191015244, 0.020368024706840515, -0.04866710677742958, -0.031986188143491745, -0.050060421228408813, 0.0715232715010643, -0.0023832754231989384, -0.0067178551107645035, -0.07528598606586456, -0.010431351140141487, 0.04648594185709953, -0.02109416201710701, 0.015230382792651653, 0.03322753682732582, -0.002494535408914089, 0.019607851281762123, -0.002363556995987892, -0.05183796584606171, -0.020990798249840736, 0.056700699031353, 0.03777829930186272, 0.06883885711431503, 0.019862299785017967, -0.00612067012116313, 0.03951519355177879, -0.007191756274551153, 0.029813887551426888, -0.07425083220005035, -0.006054349709302187, -0.00850922241806984, 0.054114073514938354, 0.006867213640362024, -0.0443233922123909, 0.021261394023895264, 0.05525112897157669, 0.02376614324748516, -0.02804465964436531, 0.05225871503353119))
        database.add_entry(embedding, response)
        cap = cv2.VideoCapture('videos/6s079_vid_2.mov')
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        out = cv2.VideoWriter('videos/processed_2.mp4', fourcc, 30.0, (w,h))     

    i = 0
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    
    # loop through video
    while cap.isOpened():
        # Capture frame-by-frame
        print(f'Processing frame {i}/{frame_count}')
        ret, frame = cap.read()
        i+=1

        if i%1 != 0:
            continue
        if i>frame_count:
            break

        if cv2.waitKey(1) == ord('q'):
            break

        face_boxes = facial_detection.extract_face_box(frame)
        if face_boxes is None:
            continue

        detected_face = facial_detection.detect_face(frame)
        embedding = facial_detection.get_facial_embeddings(detected_face).numpy()

        if args.phase == 1:
            embedding_buffer.append(embedding)
            text = 'Face Detected: Not in Database'
            processed_frame = draw_faces(frame, face_boxes, False, text)

        else:   
                value, distance = database.query_entry(embedding)
                if distance>0.1:
                    text = value
                    found = True

                    processed_frame = draw_faces(frame, face_boxes, found, text)
                else:
                    text = 'Face Detected: Not in Database'
                    processed_frame = draw_faces(frame, face_boxes, False, text)


        # Display the resulting frame
        #cv2.imshow('preview', processed_frame)
        out.write(processed_frame)
        

    if args.phase == 1:
        avg_embedding = np.mean(embedding_buffer, axis=0)
        database.add_entry(avg_embedding.reshape(-1), response)

        print(database.table)

        # video_path = 'videos/processed_1.mp4'
        # audio_path = 'videos/6s079_vid_1.mov'
        # output_path = 'videos/processed_1_audio.mp4'

        # video = mp.VideoFileClip(video_path)
        # audio = mp.AudioFileClip(audio_path)

        # video = video.set_audio(audio)

        # video.write_videofile(output_path)

        # # save video as mp4
        # out = cv2.VideoWriter('processed_1.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 30, (600, 400))    

    
    # Release capture and destroy windows
    cap.release()
    cv2.destroyAllWindows()

    


if __name__ == "__main__":
    args = arg_parser()
    main(args)